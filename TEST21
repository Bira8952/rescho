-- Advanced GUI Library with Improved Design and Functionality

local library = {
    windowCount = 0,
}

local inputService = game:GetService('UserInputService')
local tweenService = game:GetService('TweenService')
local runService = game:GetService('RunService')

-- Dragger Module
local dragger = {}
do
    function dragger.new(frame)
        local dragging = false
        local dragInput, mouseStart, frameStart

        frame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                mouseStart = input.Position
                frameStart = frame.Position

                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)

        frame.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                dragInput = input
            end
        end)

        inputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                local delta = input.Position - mouseStart
                frame.Position = UDim2.new(
                    frameStart.X.Scale,
                    frameStart.X.Offset + delta.X,
                    frameStart.Y.Scale,
                    frameStart.Y.Offset + delta.Y
                )
            end
        end)
    end
end

-- Default Options
local defaults = {
    textColor = Color3.fromRGB(255, 255, 255),
    backgroundColor = Color3.fromRGB(30, 30, 30),
    accentColor = Color3.fromRGB(0, 122, 204),
    font = Enum.Font.SourceSansSemibold,
}

-- Library Functions
function library:Create(class, props)
    local object = Instance.new(class)
    for prop, value in pairs(props) do
        object[prop] = value
    end
    return object
end

function library:CreateWindow(options)
    options = options or {}
    setmetatable(options, { __index = defaults })
    assert(options.text, "Window must have a 'text' property.")

    self.windowCount = self.windowCount + 1

    -- ScreenGui
    library.gui = library.gui or self:Create("ScreenGui", {
        Name = "UILibrary",
        Parent = game:GetService("CoreGui"),
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
    })

    -- Main Window Frame
    local windowWidth = 400
    local windowHeight = 50
    local screenSize = workspace.CurrentCamera.ViewportSize
    local centerX = (screenSize.X - windowWidth) / 2
    local centerY = (screenSize.Y - windowHeight) / 2

    local windowFrame = self:Create("Frame", {
        Name = options.text,
        Parent = library.gui,
        BackgroundColor3 = options.backgroundColor,
        Size = UDim2.new(0, windowWidth, 0, windowHeight),
        Position = UDim2.new(0, centerX, 0, centerY),
        BorderSizePixel = 0,
        ClipsDescendants = true,
    })
    local windowCorner = self:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = windowFrame,
    })

    -- Title Bar
    local titleBar = self:Create("Frame", {
        Parent = windowFrame,
        BackgroundColor3 = options.accentColor,
        Size = UDim2.new(1, 0, 0, 40),
        BorderSizePixel = 0,
    })
    local titleBarCorner = self:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = titleBar,
    })
    titleBarCorner.Name = "TitleBarCorner"

    -- Title Label
    local titleLabel = self:Create("TextLabel", {
        Parent = titleBar,
        Text = options.text,
        TextColor3 = options.textColor,
        Font = options.font,
        TextSize = 20,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -100, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        TextXAlignment = Enum.TextXAlignment.Left,
    })

    -- Close Button
    local closeButton = self:Create("TextButton", {
        Parent = titleBar,
        Text = "X",
        TextColor3 = Color3.fromRGB(255, 85, 85),
        Font = options.font,
        TextSize = 24,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 40, 1, 0),
        Position = UDim2.new(1, -50, 0, 0),
        AutoButtonColor = false,
    })
    closeButton.MouseButton1Click:Connect(function()
        windowFrame:Destroy()
    end)

    -- Minimize Button
    local minimizeButton = self:Create("TextButton", {
        Parent = titleBar,
        Text = "_",
        TextColor3 = options.textColor,
        Font = options.font,
        TextSize = 24,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 40, 1, 0),
        Position = UDim2.new(1, -90, 0, 0),
        AutoButtonColor = false,
    })
    local isMinimized = false
    minimizeButton.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        local targetSize = isMinimized and UDim2.new(1, 0, 0, 0) or UDim2.new(1, 0, 0, windowContent.AbsoluteSize.Y)
        windowContent.Visible = not isMinimized
        tweenService:Create(windowFrame, TweenInfo.new(0.3), { Size = targetSize }):Play()
    end)

    -- Window Content
    local windowContent = self:Create("Frame", {
        Parent = windowFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 40),
        Size = UDim2.new(1, 0, 1, -40),
        ClipsDescendants = true,
    })

    local contentLayout = self:Create("UIListLayout", {
        Parent = windowContent,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
    })

    local contentPadding = self:Create("UIPadding", {
        Parent = windowContent,
        PaddingLeft = UDim.new(0, 10),
        PaddingTop = UDim.new(0, 10),
    })

    -- Drag Functionality
    dragger.new(titleBar)

    -- Update Window Size
    local function updateWindowSize()
        local contentSize = contentLayout.AbsoluteContentSize.Y + 20
        windowFrame.Size = UDim2.new(0, windowWidth, 0, 40 + contentSize)
        windowContent.Size = UDim2.new(1, 0, 0, contentSize)
    end

    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateWindowSize)
    updateWindowSize()

    -- Window Methods
    local window = {}
    window.AddLabel = function(self, text)
        local label = library:Create("TextLabel", {
            Parent = windowContent,
            Text = text,
            TextColor3 = options.textColor,
            Font = options.font,
            TextSize = 18,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -20, 0, 30),
            TextXAlignment = Enum.TextXAlignment.Left,
            LayoutOrder = self.count,
        })
        self.count = self.count + 1
        updateWindowSize()
        return label
    end

    window.AddButton = function(self, text, callback)
        local button = library:Create("TextButton", {
            Parent = windowContent,
            Text = text,
            TextColor3 = options.textColor,
            Font = options.font,
            TextSize = 18,
            BackgroundColor3 = options.accentColor,
            Size = UDim2.new(1, -20, 0, 40),
            AutoButtonColor = false,
            LayoutOrder = self.count,
        })
        local buttonCorner = self:Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = button,
        })
        button.MouseButton1Click:Connect(callback)
        self.count = self.count + 1
        updateWindowSize()
        return button
    end

    window.AddToggle = function(self, text, callback)
        local toggleFrame = library:Create("Frame", {
            Parent = windowContent,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -20, 0, 40),
            LayoutOrder = self.count,
        })
        local toggleLabel = library:Create("TextLabel", {
            Parent = toggleFrame,
            Text = text,
            TextColor3 = options.textColor,
            Font = options.font,
            TextSize = 18,
            BackgroundTransparency = 1,
            Size = UDim2.new(0.7, 0, 1, 0),
            TextXAlignment = Enum.TextXAlignment.Left,
        })
        local toggleButton = library:Create("TextButton", {
            Parent = toggleFrame,
            Text = "OFF",
            TextColor3 = Color3.fromRGB(255, 85, 85),
            Font = options.font,
            TextSize = 18,
            BackgroundColor3 = options.backgroundColor,
            Size = UDim2.new(0.3, -10, 1, 0),
            Position = UDim2.new(0.7, 10, 0, 0),
            AutoButtonColor = false,
        })
        local toggleButtonCorner = self:Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = toggleButton,
        })
        local toggled = false
        toggleButton.MouseButton1Click:Connect(function()
            toggled = not toggled
            toggleButton.Text = toggled and "ON" or "OFF"
            toggleButton.TextColor3 = toggled and Color3.fromRGB(85, 255, 85) or Color3.fromRGB(255, 85, 85)
            callback(toggled)
        end)
        self.count = self.count + 1
        updateWindowSize()
        return toggleButton
    end

    window.AddTextBox = function(self, placeholder, callback)
        local textBox = library:Create("TextBox", {
            Parent = windowContent,
            PlaceholderText = placeholder,
            Text = "",
            TextColor3 = options.textColor,
            Font = options.font,
            TextSize = 18,
            BackgroundColor3 = options.backgroundColor,
            Size = UDim2.new(1, -20, 0, 40),
            ClearTextOnFocus = false,
            LayoutOrder = self.count,
        })
        local textBoxCorner = self:Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = textBox,
        })
        textBox.FocusLost:Connect(function(enterPressed)
            if enterPressed then
                callback(textBox.Text)
            end
        end)
        self.count = self.count + 1
        updateWindowSize()
        return textBox
    end

    window.AddDropdown = function(self, items, callback)
        local dropdownOpen = false
        local selectedItem = items[1]
        local dropdownFrame = library:Create("Frame", {
            Parent = windowContent,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -20, 0, 40),
            LayoutOrder = self.count,
        })
        local dropdownButton = library:Create("TextButton", {
            Parent = dropdownFrame,
            Text = selectedItem,
            TextColor3 = options.textColor,
            Font = options.font,
            TextSize = 18,
            BackgroundColor3 = options.backgroundColor,
            Size = UDim2.new(1, 0, 1, 0),
            AutoButtonColor = false,
        })
        local dropdownButtonCorner = self:Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = dropdownButton,
        })
        local dropdownIcon = self:Create("ImageLabel", {
            Parent = dropdownButton,
            Image = "rbxassetid://3926305904",
            ImageRectOffset = Vector2.new(964, 284),
            ImageRectSize = Vector2.new(36, 36),
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 24, 0, 24),
            Position = UDim2.new(1, -30, 0.5, -12),
        })

        local dropdownListFrame = library:Create("ScrollingFrame", {
            Parent = dropdownFrame,
            BackgroundColor3 = options.backgroundColor,
            Size = UDim2.new(1, 0, 0, 0),
            Position = UDim2.new(0, 0, 1, 0),
            BorderSizePixel = 0,
            ClipsDescendants = true,
            ScrollBarThickness = 4,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Visible = false,
            ZIndex = 2,
        })
        local dropdownListCorner = self:Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = dropdownListFrame,
        })
        local dropdownListLayout = self:Create("UIListLayout", {
            Parent = dropdownListFrame,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 5),
        })
        local dropdownListPadding = self:Create("UIPadding", {
            Parent = dropdownListFrame,
            PaddingTop = UDim.new(0, 5),
            PaddingBottom = UDim.new(0, 5),
            PaddingLeft = UDim.new(0, 5),
            PaddingRight = UDim.new(0, 5),
        })

        local function refreshDropdown()
            dropdownListFrame:ClearAllChildren()
            dropdownListLayout.Parent = dropdownListFrame
            dropdownListPadding.Parent = dropdownListFrame
            dropdownListCorner.Parent = dropdownListFrame

            for i, item in ipairs(items) do
                local itemButton = library:Create("TextButton", {
                    Parent = dropdownListFrame,
                    Text = item,
                    TextColor3 = options.textColor,
                    Font = options.font,
                    TextSize = 18,
                    BackgroundColor3 = options.backgroundColor,
                    Size = UDim2.new(1, -10, 0, 40),
                    AutoButtonColor = false,
                    LayoutOrder = i,
                    ZIndex = 2,
                })
                local itemButtonCorner = self:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = itemButton,
                })
                itemButton.MouseButton1Click:Connect(function()
                    selectedItem = item
                    dropdownButton.Text = selectedItem
                    callback(selectedItem)
                    dropdownListFrame.Visible = false
                    dropdownOpen = false
                end)
            end
            dropdownListFrame.CanvasSize = UDim2.new(0, 0, 0, dropdownListLayout.AbsoluteContentSize.Y + 10)
        end
        refreshDropdown()

        dropdownButton.MouseButton1Click:Connect(function()
            dropdownOpen = not dropdownOpen
            dropdownListFrame.Visible = dropdownOpen
            if dropdownOpen then
                tweenService:Create(dropdownListFrame, TweenInfo.new(0.3), { Size = UDim2.new(1, 0, 0, 200) }):Play()
            else
                tweenService:Create(dropdownListFrame, TweenInfo.new(0.3), { Size = UDim2.new(1, 0, 0, 0) }):Play()
            end
        end)

        inputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 and dropdownOpen then
                local mouseLocation = inputService:GetMouseLocation()
                local guiInset = game:GetService("GuiService"):GetGuiInset()
                local relativePosition = mouseLocation - guiInset
                if not dropdownListFrame.AbsolutePosition or not dropdownListFrame.AbsoluteSize then
                    return
                end
                local framePosition = dropdownListFrame.AbsolutePosition
                local frameSize = dropdownListFrame.AbsoluteSize
                if relativePosition.X < framePosition.X or relativePosition.X > framePosition.X + frameSize.X
                    or relativePosition.Y < framePosition.Y or relativePosition.Y > framePosition.Y + frameSize.Y then
                    dropdownListFrame.Visible = false
                    dropdownOpen = false
                end
            end
        end)

        self.count = self.count + 1
        updateWindowSize()
        return {
            Refresh = function(newItems)
                items = newItems
                refreshDropdown()
            end,
        }
    end

    return window
end

return library
