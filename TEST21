-- Enhanced GUI Library with Close Button and Rounded Corners

local library = {
    windowCount = 0;
}

local dragger = {};
local resizer = {};

do
    local mouse = game:GetService("Players").LocalPlayer:GetMouse();
    local inputService = game:GetService('UserInputService');
    local heartbeat = game:GetService("RunService").Heartbeat;

    function dragger.new(frame)
        local s, event = pcall(function()
            return frame.MouseEnter
        end)

        if s then
            frame.Active = true;

            event:Connect(function()
                local input = frame.InputBegan:Connect(function(key)
                    if key.UserInputType == Enum.UserInputType.MouseButton1 or key.UserInputType == Enum.UserInputType.Touch then
                        local objectPosition = Vector2.new(mouse.X - frame.AbsolutePosition.X, mouse.Y - frame.AbsolutePosition.Y);
                        while heartbeat:Wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                            frame.Position = UDim2.new(0, mouse.X - objectPosition.X + (frame.Size.X.Offset * frame.AnchorPoint.X), 0, mouse.Y - objectPosition.Y + (frame.Size.Y.Offset * frame.AnchorPoint.Y))
                        end
                    end
                end)

                local leave;
                leave = frame.MouseLeave:Connect(function()
                    input:Disconnect();
                    leave:Disconnect();
                end)
            end)
        end
    end

    function resizer.new(p, s)
        p:GetPropertyChangedSignal('AbsoluteSize'):Connect(function()
            s.Size = UDim2.new(s.Size.X.Scale, s.Size.X.Offset, s.Size.Y.Scale, p.AbsoluteSize.Y);
        end)
    end
end

local defaults = {
    txtcolor = Color3.fromRGB(255, 255, 255), -- White text
    underline = Color3.fromRGB(100, 100, 100), -- Gray underline
    barcolor = Color3.fromRGB(30, 30, 30), -- Dark bar color
    bgcolor = Color3.fromRGB(40, 40, 40), -- Slightly lighter background
    boxcolor = Color3.fromRGB(50, 50, 50), -- Darker box color
    font = Enum.Font.SourceSansSemibold, -- Professional font
}

function library:Create(class, props)
    local object = Instance.new(class);

    for i, prop in next, props do
        if i ~= "Parent" then
            object[i] = prop;
        end
    end

    object.Parent = props.Parent;
    return object;
end

function library:CreateWindow(options)
    assert(options.text, "no name");
    local window = {
        count = 0;
        toggles = {},
        closed = false;
    }

    local options = options or {};
    setmetatable(options, {__index = defaults})

    self.windowCount = self.windowCount + 1;

    library.gui = library.gui or self:Create("ScreenGui", {Name = "UILibrary", Parent = game:GetService("CoreGui")})
    window.frame = self:Create("Frame", {
        Name = options.text;
        Parent = self.gui,
        Active = true,
        BackgroundTransparency = 0,
        Size = UDim2.new(0, 220, 0, 40),
        Position = UDim2.new(0, (15 + ((240 * self.windowCount) - 240)), 0, 15),
        BackgroundColor3 = options.barcolor,
        BorderSizePixel = 0;
    })
    -- UICorner for rounded edges
    local frameCorner = Instance.new("UICorner", window.frame)
    frameCorner.CornerRadius = UDim.new(0, 6)

    window.background = self:Create('Frame', {
        Name = 'Background';
        Parent = window.frame,
        BorderSizePixel = 0;
        BackgroundColor3 = options.bgcolor,
        Position = UDim2.new(0, 0, 1, 0),
        Size = UDim2.new(1, 0, 0, 25),
        ClipsDescendants = true;
    })
    -- UICorner for rounded edges
    local backgroundCorner = Instance.new("UICorner", window.background)
    backgroundCorner.CornerRadius = UDim.new(0, 6)
   
    window.container = self:Create('Frame', {
        Name = 'Container';
        Parent = window.background,
        BorderSizePixel = 0;
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 1, 0),
        ClipsDescendants = true;
    })
   
    window.organizer = self:Create('UIListLayout', {
        Name = 'Sorter';
        SortOrder = Enum.SortOrder.LayoutOrder;
        Parent = window.container;
        Padding = UDim.new(0, 5),
    })
   
    window.padder = self:Create('UIPadding', {
        Name = 'Padding';
        PaddingLeft = UDim.new(0, 10);
        PaddingTop = UDim.new(0, 10);
        Parent = window.container;
    })

    local toggleButton = self:Create("TextButton", {
        Name = 'Toggle';
        ZIndex = 2,
        BackgroundTransparency = 1;
        Position = UDim2.new(1, -70, 0, 0),
        Size = UDim2.new(0, 35, 1, 0),
        Text = "-",
        TextSize = 24,
        TextColor3 = options.txtcolor,
        Font = options.font;
        Parent = window.frame,
    });
    toggleButton.MouseButton1Click:Connect(function()
        window.closed = not window.closed
        toggleButton.Text = (window.closed and "+" or "-")
        if window.closed then
            window:Resize(true, UDim2.new(1, 0, 0, 0))
        else
            window:Resize(true)
        end
    end)

    -- Close Button
    local closeButton = self:Create("TextButton", {
        Name = 'Close';
        ZIndex = 2,
        BackgroundTransparency = 1;
        Position = UDim2.new(1, -35, 0, 0),
        Size = UDim2.new(0, 35, 1, 0),
        Text = "X",
        TextSize = 24,
        TextColor3 = Color3.fromRGB(255, 0, 0),
        Font = options.font;
        Parent = window.frame,
    });
    closeButton.MouseButton1Click:Connect(function()
        window.frame:Destroy()
    end)

    self:Create("TextLabel", {
        Size = UDim2.new(1, -80, 1, 0),
        BackgroundTransparency = 1;
        BorderSizePixel = 0;
        TextColor3 = options.txtcolor,
        TextSize = 24,
        Font = options.font;
        Text = options.text or "Window",
        Name = "Window",
        Position = UDim2.new(0, 10, 0, 0),
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = window.frame,
    })

    do
        dragger.new(window.frame)
        resizer.new(window.background, window.container);
    end

    local function getSize()
        local ySize = 0;
        for i, object in next, window.container:GetChildren() do
            if (not object:IsA('UIListLayout')) and (not object:IsA('UIPadding')) then
                ySize = ySize + object.AbsoluteSize.Y + window.organizer.Padding.Offset
            end
        end
        return UDim2.new(1, 0, 0, ySize + window.padder.PaddingTop.Offset)
    end

    function window:Resize(tween, change)
        local size = change or getSize()
        self.container.ClipsDescendants = true;
       
        if tween then
            self.background:TweenSize(size, "Out", "Sine", 0.5, true)
        else
            self.background.Size = size
        end
    end

    function window:AddToggle(text, callback)
        self.count = self.count + 1

        callback = callback or function() end
        local label = library:Create("TextLabel", {
            Text =  text,
            Size = UDim2.new(1, -10, 0, 30);
            BackgroundTransparency = 1;
            TextColor3 = options.txtcolor,
            TextXAlignment = Enum.TextXAlignment.Left;
            LayoutOrder = self.count;
            TextSize = 18,
            Font = options.font,
            Parent = self.container;
        })

        local button = library:Create("TextButton", {
            Text = "OFF",
            TextColor3 = Color3.fromRGB(255, 0, 0),
            BackgroundColor3 = options.boxcolor,
            Position = UDim2.new(1, -60, 0.5, -15),
            Size = UDim2.new(0, 50, 0, 30),
            TextSize = 18,
            Font = options.font,
            Parent = label;
            AnchorPoint = Vector2.new(1, 0.5),
            AutoButtonColor = false,
        })
        -- UICorner for rounded edges
        local buttonCorner = Instance.new("UICorner", button)
        buttonCorner.CornerRadius = UDim.new(0, 6)

        button.MouseButton1Click:Connect(function()
            self.toggles[text] = (not self.toggles[text])
            button.TextColor3 = (self.toggles[text] and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(255, 0, 0))
            button.Text = (self.toggles[text] and "ON" or "OFF")

            callback(self.toggles[text])
        end)

        self:Resize()
        return button
    end

    function window:AddBox(text, callback)
        self.count = self.count + 1
        callback = callback or function() end

        local box = library:Create("TextBox", {
            PlaceholderText = text,
            Size = UDim2.new(1, -10, 0, 30);
            BackgroundColor3 = options.boxcolor,
            TextColor3 = options.txtcolor,
            TextXAlignment = Enum.TextXAlignment.Left;
            TextSize = 18,
            Text = "",
            Font = options.font,
            LayoutOrder = self.count;
            BorderSizePixel = 0;
            Parent = self.container;
        })
        -- UICorner for rounded edges
        local boxCorner = Instance.new("UICorner", box)
        boxCorner.CornerRadius = UDim.new(0, 6)

        box.FocusLost:Connect(function(enterPressed)
            if enterPressed then
                callback(box.Text)
            end
        end)

        self:Resize()
        return box
    end

    function window:AddButton(text, callback)
        self.count = self.count + 1

        callback = callback or function() end
        local button = library:Create("TextButton", {
            Text =  text,
            Size = UDim2.new(1, -10, 0, 30);
            BackgroundColor3 = options.boxcolor,
            TextColor3 = options.txtcolor,
            TextXAlignment = Enum.TextXAlignment.Center;
            TextSize = 18,
            Font = options.font,
            LayoutOrder = self.count;
            Parent = self.container;
            AutoButtonColor = false,
        })
        -- UICorner for rounded edges
        local buttonCorner = Instance.new("UICorner", button)
        buttonCorner.CornerRadius = UDim.new(0, 6)

        button.MouseButton1Click:Connect(callback)
        self:Resize()
        return button
    end
   
    function window:AddLabel(text)
        self.count = self.count + 1;
       
        local tSize = game:GetService('TextService'):GetTextSize(text, 18, options.font, Vector2.new(window.container.AbsoluteSize.X - 20, math.huge))

        local label = library:Create("TextLabel", {
            Text =  text,
            Size = UDim2.new(1, -10, 0, tSize.Y + 10);
            TextScaled = false;
            BackgroundTransparency = 1;
            TextColor3 = options.txtcolor,
            TextXAlignment = Enum.TextXAlignment.Left;
            TextSize = 18,
            Font = options.font,
            LayoutOrder = self.count;
            Parent = self.container;
        })

        self:Resize()
        return label
    end

    function window:AddDropdown(optionsList, callback)
        self.count = self.count + 1
        local default = optionsList[1] or "";
       
        callback = callback or function() end
        local dropdown = library:Create("TextButton", {
            Size = UDim2.new(1, -10, 0, 30);
            BackgroundColor3 = options.boxcolor,
            TextColor3 = options.txtcolor,
            TextXAlignment = Enum.TextXAlignment.Left;
            TextSize = 18,
            Text = default,
            Font = options.font,
            BorderSizePixel = 0;
            LayoutOrder = self.count;
            Parent = self.container;
            AutoButtonColor = false,
        })
        -- UICorner for rounded edges
        local dropdownCorner = Instance.new("UICorner", dropdown)
        dropdownCorner.CornerRadius = UDim.new(0, 6)
       
        local arrow = library:Create("ImageLabel", {
            BackgroundTransparency = 1;
            Image = 'rbxassetid://7072718362'; -- Down arrow icon
            Size = UDim2.new(0, 24, 0, 24);
            Position = UDim2.new(1, -30, 0.5, -12);
            Parent = dropdown;
        })
       
        local frame;
       
        local function isInGui(frame)
            local mloc = game:GetService('UserInputService'):GetMouseLocation();
            local mouse = Vector2.new(mloc.X, mloc.Y - 36);
           
            local x1, x2 = frame.AbsolutePosition.X, frame.AbsolutePosition.X + frame.AbsoluteSize.X;
            local y1, y2 = frame.AbsolutePosition.Y, frame.AbsolutePosition.Y + frame.AbsoluteSize.Y;
       
            return (mouse.X >= x1 and mouse.X <= x2) and (mouse.Y >= y1 and mouse.Y <= y2)
        end

        local function count(t)
            local c = 0;
            for i, v in next, t do
                c = c + 1
            end
            return c;
        end
       
        dropdown.MouseButton1Click:Connect(function()
            if count(optionsList) == 0 then
                return
            end

            if frame then
                frame:Destroy();
                frame = nil;
                return
            end
           
            self.container.ClipsDescendants = false;

            frame = library:Create('Frame', {
                Position = UDim2.new(0, 0, 1, 0);
                BackgroundColor3 = options.boxcolor;
                Size = UDim2.new(1, 0, 0, (count(optionsList) * 35));
                BorderSizePixel = 0;
                Parent = dropdown;
                ClipsDescendants = true;
                ZIndex = 2;
            })
            -- UICorner for rounded edges
            local frameCorner = Instance.new("UICorner", frame)
            frameCorner.CornerRadius = UDim.new(0, 6)
           
            library:Create('UIListLayout', {
                Name = 'Layout';
                Parent = frame;
                SortOrder = Enum.SortOrder.LayoutOrder;
                Padding = UDim.new(0, 5);
            })

            for i, option in next, optionsList do
                local selection = library:Create('TextButton', {
                    Text = option;
                    BackgroundColor3 = options.barcolor;
                    TextColor3 = options.txtcolor,
                    BorderSizePixel = 0;
                    TextSize = 18;
                    Font = options.font;
                    Size = UDim2.new(1, -10, 0, 30);
                    LayoutOrder = i;
                    Parent = frame;
                    ZIndex = 2;
                    AutoButtonColor = false,
                })
                -- UICorner for rounded edges
                local selectionCorner = Instance.new("UICorner", selection)
                selectionCorner.CornerRadius = UDim.new(0, 6)
               
                selection.MouseButton1Click:Connect(function()
                    dropdown.Text = option;
                    callback(option)
                    frame:Destroy()
                    frame = nil
                end)
            end
        end);

        game:GetService('UserInputService').InputBegan:Connect(function(m)
            if m.UserInputType == Enum.UserInputType.MouseButton1 then
                if frame and (not isInGui(frame)) then
                    frame:Destroy();
                    frame = nil
                end
            end
        end)
       
        callback(default);
        self:Resize()
        return {
            Refresh = function(self, array)
                if frame then frame:Destroy() end
                optionsList = array
                dropdown.Text = optionsList[1];
            end
        }
    end;
   
    return window
end

return library
