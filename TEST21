-- Beginn des verbesserten Skripts
local library = {
    windowcount = 0;
}

local dragger = {};
local resizer = {};

do
    local mouse = game:GetService("Players").LocalPlayer:GetMouse();
    local inputService = game:GetService('UserInputService');
    local heartbeat = game:GetService("RunService").Heartbeat;

    function dragger.new(frame)
        local s, event = pcall(function()
            return frame.MouseEnter
        end)

        if s then
            frame.Active = true;

            event:Connect(function()
                local input = frame.InputBegan:Connect(function(key)
                    if key.UserInputType == Enum.UserInputType.MouseButton1 or key.UserInputType == Enum.UserInputType.Touch then
                        local objectPosition = Vector2.new(mouse.X - frame.AbsolutePosition.X, mouse.Y - frame.AbsolutePosition.Y);
                        while heartbeat:Wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                            frame.Position = UDim2.new(0, mouse.X - objectPosition.X + (frame.Size.X.Offset * frame.AnchorPoint.X), 0, mouse.Y - objectPosition.Y + (frame.Size.Y.Offset * frame.AnchorPoint.Y))
                        end
                    end
                end)

                local leave;
                leave = frame.MouseLeave:Connect(function()
                    input:Disconnect();
                    leave:Disconnect();
                end)
            end)
        end
    end

    function resizer.new(p, s)
        p:GetPropertyChangedSignal('AbsoluteSize'):Connect(function()
            s.Size = UDim2.new(s.Size.X.Scale, s.Size.X.Offset, s.Size.Y.Scale, p.AbsoluteSize.Y);
        end)
    end
end

local defaults = {
    txtcolor = Color3.fromRGB(255, 255, 255),
    underline = Color3.fromRGB(0, 122, 204),
    barcolor = Color3.fromRGB(35, 35, 35),
    bgcolor = Color3.fromRGB(45, 45, 45),
    boxcolor = Color3.fromRGB(55, 55, 55),
    bartextcolor = Color3.fromRGB(255, 255, 255),
}

function library.Create(class, props)
    local object = Instance.new(class);

    for i, prop in next, props do
        if i ~= "Parent" then
            object[i] = prop;
        end
    end

    object.Parent = props.Parent;
    return object;
end

function library:CreateWindow(options)
    assert(options.text, "kein Name angegeben");
    local window = {
        count = 0;
        toggles = {},
        closed = false;
    }

    local options = options or {};
    setmetatable(options, {__index = defaults})

    self.windowcount = self.windowcount + 1;

    library.gui = library.gui or library.Create("ScreenGui", {Name = "UILibrary", Parent = game:GetService("CoreGui")})
    library.gui.ResetOnSpawn = false

    window.frame = library.Create("Frame", {
        Name = options.text;
        Parent = library.gui,
        Active = true,
        BackgroundTransparency = 0,
        Size = UDim2.new(0, 220, 0, 30),
        Position = UDim2.new(0, (15 + ((240 * self.windowcount) - 240)), 0, 15),
        BackgroundColor3 = options.barcolor,
        BorderSizePixel = 0;
        ClipsDescendants = false;
        ZIndex = 1;
    })

    library.Create('UICorner', {
        CornerRadius = UDim.new(0, 6),
        Parent = window.frame,
    })

    window.background = library.Create('Frame', {
        Name = 'Background';
        Parent = window.frame,
        BorderSizePixel = 0;
        BackgroundColor3 = options.bgcolor,
        Position = UDim2.new(0, 0, 1, 0),
        Size = UDim2.new(1, 0, 0, 25),
        ClipsDescendants = false;
        ZIndex = 1;
    })

    library.Create('UICorner', {
        CornerRadius = UDim.new(0, 6),
        Parent = window.background,
    })

    window.container = library.Create('ScrollingFrame', {
        Name = 'Container';
        Parent = window.background,
        BorderSizePixel = 0;
        BackgroundTransparency = 1;
        Size = UDim2.new(1, 0, 1, 0),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 0,
        VerticalScrollBarInset = Enum.ScrollBarInset.None,
        ScrollingEnabled = false,
        ClipsDescendants = false;
        ZIndex = 1;
    })

    window.organizer = library.Create('UIListLayout', {
        Name = 'Sorter';
        SortOrder = Enum.SortOrder.LayoutOrder;
        Padding = UDim.new(0, 5);
        Parent = window.container;
    })

    window.padder = library.Create('UIPadding', {
        Name = 'Padding';
        PaddingLeft = UDim.new(0, 10);
        PaddingTop = UDim.new(0, 10);
        Parent = window.container;
    })

    library.Create("Frame", {
        Name = 'Underline';
        Size = UDim2.new(1, 0, 0, 2),
        Position = UDim2.new(0, 0, 1, -2),
        BorderSizePixel = 0;
        BackgroundColor3 = options.underline;
        Parent = window.frame;
        ZIndex = 1;
    })

    -- Position der Buttons angepasst, um Platz für den Schließen-Button zu schaffen
    local togglebutton = library.Create("TextButton", {
        Name = 'Toggle';
        ZIndex = 2,
        BackgroundTransparency = 1;
        Position = UDim2.new(1, -60, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Text = "-",
        TextSize = 18,
        TextColor3 = options.txtcolor,
        Font = Enum.Font.GothamBold;
        Parent = window.frame,
    });

    togglebutton.MouseButton1Click:Connect(function()
        window.closed = not window.closed
        togglebutton.Text = (window.closed and "+" or "-")
        if window.closed then
            window:Resize(true, UDim2.new(1, 0, 0, 0))
        else
            window:Resize(true)
        end
    end)

    -- Schließen-Button hinzufügen
    local closebutton = library.Create("TextButton", {
        Name = 'Close';
        ZIndex = 2,
        BackgroundTransparency = 1;
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Text = "x",
        TextSize = 18,
        TextColor3 = options.txtcolor,
        Font = Enum.Font.GothamBold;
        Parent = window.frame,
    });

    closebutton.MouseButton1Click:Connect(function()
        window.frame:Destroy()
    end)

    library.Create("TextLabel", {
        Size = UDim2.new(1, -65, 1, 0), -- Angepasst für die beiden Buttons
        BackgroundTransparency = 1;
        BorderSizePixel = 0;
        TextColor3 = options.bartextcolor,
        TextSize = 18,
        Font = Enum.Font.GothamBold;
        Text = options.text or "Fenster",
        TextXAlignment = Enum.TextXAlignment.Left,
        Name = "Window",
        Parent = window.frame,
        ZIndex = 1;
    })

    do
        dragger.new(window.frame)
        resizer.new(window.background, window.container);
    end

    local function getSize()
        local ySize = 0;
        for i, object in next, window.container:GetChildren() do
            if (not object:IsA('UIListLayout')) and (not object:IsA('UIPadding')) then
                ySize = ySize + object.AbsoluteSize.Y + window.organizer.Padding.Offset
            end
        end
        return UDim2.new(1, 0, 0, ySize + 10)
    end

    function window:Resize(tween, change)
        local size = change or getSize()
        self.container.ClipsDescendants = true;

        if tween then
            self.background:TweenSize(size, "Out", "Sine", 0.5, true)
        else
            self.background.Size = size
        end

        -- Aktualisiere die CanvasSize des Containers
        self.container.CanvasSize = UDim2.new(0, 0, 0, self.organizer.AbsoluteContentSize.Y + 10)
    end

    function window:AddToggle(text, callback)
        self.count = self.count + 1

        callback = callback or function() end
        local label = library.Create("TextLabel", {
            Text = text,
            Size = UDim2.new(1, -10, 0, 25);
            BackgroundTransparency = 1;
            TextColor3 = options.txtcolor;
            TextXAlignment = Enum.TextXAlignment.Left;
            LayoutOrder = self.count;
            TextSize = 16,
            Font = Enum.Font.Gotham;
            Parent = self.container;
            ZIndex = 1;
        })

        local button = library.Create("TextButton", {
            Text = "AUS",
            TextColor3 = Color3.fromRGB(255, 85, 85),
            BackgroundTransparency = 0;
            BackgroundColor3 = Color3.fromRGB(60, 60, 60),
            Position = UDim2.new(1, -60, 0.5, -10),
            Size = UDim2.new(0, 50, 0, 20),
            TextSize = 14,
            Font = Enum.Font.GothamBold,
            Parent = label;
            ZIndex = 1;
        })

        library.Create('UICorner', {
            CornerRadius = UDim.new(0, 5),
            Parent = button,
        })

        button.MouseButton1Click:Connect(function()
            self.toggles[text] = (not self.toggles[text])
            button.TextColor3 = (self.toggles[text] and Color3.fromRGB(85, 255, 127) or Color3.fromRGB(255, 85, 85))
            button.Text = (self.toggles[text] and "AN" or "AUS")

            callback(self.toggles[text])
        end)

        self:Resize()
        return button
    end

    function window:AddBox(text, callback)
        self.count = self.count + 1
        callback = callback or function() end

        local box = library.Create("TextBox", {
            PlaceholderText = text,
            Size = UDim2.new(1, -10, 0, 25);
            BackgroundTransparency = 0;
            BackgroundColor3 = options.boxcolor,
            TextColor3 = options.txtcolor;
            TextXAlignment = Enum.TextXAlignment.Left;
            TextSize = 16,
            Text = "",
            Font = Enum.Font.Gotham,
            LayoutOrder = self.count;
            BorderSizePixel = 0;
            Parent = self.container;
            ZIndex = 1;
        })

        library.Create('UICorner', {
            CornerRadius = UDim.new(0, 5),
            Parent = box,
        })

        box.FocusLost:Connect(function(...)
            callback(box, ...)
        end)

        self:Resize()
        return box
    end

    function window:AddButton(text, callback)
        self.count = self.count + 1

        callback = callback or function() end
        local button = library.Create("TextButton", {
            Text = text,
            Size = UDim2.new(1, -10, 0, 25);
            BackgroundTransparency = 0;
            BackgroundColor3 = options.boxcolor,
            TextColor3 = options.txtcolor;
            TextXAlignment = Enum.TextXAlignment.Center;
            TextSize = 16,
            Font = Enum.Font.GothamBold,
            LayoutOrder = self.count;
            BorderSizePixel = 0;
            Parent = self.container;
            ZIndex = 1;
        })

        library.Create('UICorner', {
            CornerRadius = UDim.new(0, 5),
            Parent = button,
        })

        button.MouseButton1Click:Connect(callback)
        self:Resize()
        return button
    end

    function window:AddLabel(text)
        self.count = self.count + 1;

        local tSize = game:GetService('TextService'):GetTextSize(text, 16, Enum.Font.Gotham, Vector2.new(window.container.AbsoluteSize.X - 20, math.huge))

        local label = library.Create("TextLabel", {
            Text = text,
            Size = UDim2.new(1, -10, 0, tSize.Y + 5);
            BackgroundTransparency = 1;
            TextColor3 = options.txtcolor;
            TextXAlignment = Enum.TextXAlignment.Left;
            TextSize = 16,
            Font = Enum.Font.Gotham,
            LayoutOrder = self.count;
            Parent = self.container;
            ZIndex = 1;
        })

        self:Resize()
        return label
    end

    -- Verbesserte AddDropdown-Funktion
    function window:AddDropdown(optionsList, callback)
        self.count = self.count + 1
        optionsList = optionsList or {}
        local default = optionsList[1] or ""

        callback = callback or function() end
        local dropdown = library.Create("TextButton", {
            Size = UDim2.new(1, -10, 0, 25),
            BackgroundTransparency = 0,
            BackgroundColor3 = options.boxcolor,
            TextColor3 = options.txtcolor,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextSize = 16,
            Text = "  " .. default,
            Font = Enum.Font.Gotham,
            LayoutOrder = self.count,
            BorderSizePixel = 0,
            Parent = self.container,
            ZIndex = 1,
            ClipsDescendants = false,
        })

        library.Create('UICorner', {
            CornerRadius = UDim.new(0, 5),
            Parent = dropdown,
        })

        local arrow = library.Create("ImageLabel", {
            BackgroundTransparency = 1,
            Image = 'rbxassetid://7072718362',
            Size = UDim2.new(0, 16, 0, 16),
            Position = UDim2.new(1, -25, 0.5, -8),
            Parent = dropdown,
            ZIndex = 1,
        })

        local frame

        local function isInGui(frame)
            local mloc = game:GetService('UserInputService'):GetMouseLocation()
            local mouse = Vector2.new(mloc.X, mloc.Y - 36)

            local x1, x2 = frame.AbsolutePosition.X, frame.AbsolutePosition.X + frame.AbsoluteSize.X
            local y1, y2 = frame.AbsolutePosition.Y, frame.AbsolutePosition.Y + frame.AbsoluteSize.Y

            return (mouse.X >= x1 and mouse.X <= x2) and (mouse.Y >= y1 and mouse.Y <= y2)
        end

        dropdown.MouseButton1Click:Connect(function()
            if #optionsList == 0 then
                return
            end

            if frame then
                frame:Destroy()
                frame = nil
                return
            end

            -- Das Dropdown-Menü wird direkt unter der GUI geparented, um Clipping zu vermeiden
            frame = library.Create('Frame', {
                Position = UDim2.new(0, dropdown.AbsolutePosition.X, 0, dropdown.AbsolutePosition.Y + dropdown.AbsoluteSize.Y),
                BackgroundColor3 = options.boxcolor,
                Size = UDim2.new(0, dropdown.AbsoluteSize.X, 0, 0),
                BorderSizePixel = 0,
                Parent = library.gui, -- Direkt unter der ScreenGui geparented
                ClipsDescendants = true,
                ZIndex = 5, -- Höherer ZIndex, damit es über anderen Elementen angezeigt wird
            })

            library.Create('UICorner', {
                CornerRadius = UDim.new(0, 5),
                Parent = frame,
            })

            local listLayout = library.Create('UIListLayout', {
                Name = 'Layout',
                Parent = frame,
            })

            for i, option in ipairs(optionsList) do
                local selection = library.Create('TextButton', {
                    Text = option,
                    BackgroundColor3 = options.boxcolor,
                    TextColor3 = options.txtcolor,
                    BorderSizePixel = 0,
                    TextSize = 16,
                    Font = Enum.Font.Gotham,
                    Size = UDim2.new(1, 0, 0, 25),
                    Parent = frame,
                    ZIndex = 5,
                })

                selection.MouseButton1Click:Connect(function()
                    dropdown.Text = "  " .. option
                    callback(option)
                    frame:Destroy()
                    frame = nil
                end)
            end

            -- Größe des Frames anpassen
            frame.Size = UDim2.new(0, dropdown.AbsoluteSize.X, 0, listLayout.AbsoluteContentSize.Y)

            -- Aktualisiert die Position des Dropdowns, wenn das Fenster bewegt wird
            local connection
            connection = game:GetService("RunService").RenderStepped:Connect(function()
                if frame and dropdown.Parent then
                    frame.Position = UDim2.new(0, dropdown.AbsolutePosition.X, 0, dropdown.AbsolutePosition.Y + dropdown.AbsoluteSize.Y)
                else
                    if connection then
                        connection:Disconnect()
                    end
                end
            end)
        end)

        game:GetService('UserInputService').InputBegan:Connect(function(m)
            if m.UserInputType == Enum.UserInputType.MouseButton1 then
                if frame and (not isInGui(frame)) then
                    frame:Destroy()
                    frame = nil
                end
            end
        end)

        callback(default)
        self:Resize()
        return {
            Refresh = function(self, array)
                if frame then
                    frame:Destroy()
                    frame = nil
                end
                optionsList = array
                dropdown.Text = "  " .. optionsList[1]
            end
        }
    end

    return window
end

return library
-- Ende des verbesserten Skripts
