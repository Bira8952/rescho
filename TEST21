-- Improved GUI Library

local library = {
    windowCount = 0,
}

local inputService = game:GetService('UserInputService')
local runService = game:GetService('RunService')

-- Dragger Module
local dragger = {}
do
    function dragger.new(frame)
        local dragging = false
        local dragInput, mousePos, framePos

        frame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                mousePos = input.Position
                framePos = frame.Position

                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)

        frame.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                dragInput = input
            end
        end)

        inputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                local delta = input.Position - mousePos
                frame.Position = UDim2.new(
                    framePos.X.Scale,
                    framePos.X.Offset + delta.X,
                    framePos.Y.Scale,
                    framePos.Y.Offset + delta.Y
                )
            end
        end)
    end
end

-- Library Functions
function library:Create(class, props)
    local object = Instance.new(class)
    for prop, value in pairs(props) do
        object[prop] = value
    end
    return object
end

function library:CreateWindow(options)
    assert(options.text, "Window must have a 'text' property.")

    local window = {
        count = 0,
        toggles = {},
        closed = false,
    }

    options = setmetatable(options, { __index = {
        textColor = Color3.fromRGB(245, 245, 245),
        underlineColor = Color3.fromRGB(100, 180, 255),
        barColor = Color3.fromRGB(50, 50, 70),
        backgroundColor = Color3.fromRGB(40, 40, 55),
        boxColor = Color3.fromRGB(50, 50, 75),
    }})

    self.windowCount = self.windowCount + 1

    library.gui = library.gui or self:Create("ScreenGui", {
        Name = "UILibrary",
        Parent = game:GetService("CoreGui"),
        ResetOnSpawn = false,
    })

    -- Main Window Frame
    window.frame = self:Create("Frame", {
        Name = options.text,
        Parent = self.gui,
        BackgroundColor3 = options.barColor,
        Size = UDim2.new(0, 200, 0, 30),
        Position = UDim2.new(0, 20 * self.windowCount, 0, 20),
        BorderSizePixel = 0,
    })

    -- Draggable
    dragger.new(window.frame)

    -- Title Label
    self:Create("TextLabel", {
        Parent = window.frame,
        Size = UDim2.new(1, -30, 1, 0),
        BackgroundTransparency = 1,
        Text = options.text,
        TextColor3 = options.textColor,
        TextSize = 18,
        Font = Enum.Font.SourceSansBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        PaddingLeft = UDim.new(0, 10),
    })

    -- Toggle Button
    local toggleButton = self:Create("TextButton", {
        Parent = window.frame,
        Size = UDim2.new(0, 30, 1, 0),
        Position = UDim2.new(1, -30, 0, 0),
        BackgroundTransparency = 1,
        Text = "-",
        TextColor3 = options.textColor,
        TextSize = 18,
        Font = Enum.Font.SourceSansBold,
    })

    -- Content Frame
    window.contentFrame = self:Create("Frame", {
        Parent = window.frame,
        BackgroundColor3 = options.backgroundColor,
        Size = UDim2.new(1, 0, 0, 0),
        Position = UDim2.new(0, 0, 1, 0),
        BorderSizePixel = 0,
        ClipsDescendants = true,
    })

    -- UIListLayout for content organization
    local layout = self:Create("UIListLayout", {
        Parent = window.contentFrame,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
    })

    -- Toggle Content Visibility
    toggleButton.MouseButton1Click:Connect(function()
        window.closed = not window.closed
        toggleButton.Text = window.closed and "+" or "-"
        local newSize = window.closed and UDim2.new(1, 0, 0, 0) or UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y)
        window.contentFrame:TweenSize(newSize, Enum.EasingDirection.Out, Enum.EasingStyle.Sine, 0.3, true)
    end)

    -- Update Content Size
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        if not window.closed then
            window.contentFrame:TweenSize(UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y), Enum.EasingDirection.Out, Enum.EasingStyle.Sine, 0.3, true)
        end
    end)

    -- Add UI Elements Methods
    function window:AddToggle(text, callback)
        self.count = self.count + 1
        callback = callback or function() end

        local toggleFrame = library:Create("Frame", {
            Parent = window.contentFrame,
            Size = UDim2.new(1, -20, 0, 30),
            BackgroundTransparency = 1,
            LayoutOrder = self.count,
        })

        local label = library:Create("TextLabel", {
            Parent = toggleFrame,
            Size = UDim2.new(0.7, 0, 1, 0),
            BackgroundTransparency = 1,
            Text = text,
            TextColor3 = options.textColor,
            TextSize = 16,
            Font = Enum.Font.SourceSans,
            TextXAlignment = Enum.TextXAlignment.Left,
        })

        local toggleButton = library:Create("TextButton", {
            Parent = toggleFrame,
            Size = UDim2.new(0.3, 0, 1, 0),
            Position = UDim2.new(0.7, 0, 0, 0),
            BackgroundColor3 = options.boxColor,
            Text = "OFF",
            TextColor3 = Color3.fromRGB(255, 0, 0),
            TextSize = 16,
            Font = Enum.Font.SourceSansBold,
        })

        local toggled = false
        toggleButton.MouseButton1Click:Connect(function()
            toggled = not toggled
            toggleButton.Text = toggled and "ON" or "OFF"
            toggleButton.TextColor3 = toggled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            callback(toggled)
        end)
    end

    function window:AddButton(text, callback)
        self.count = self.count + 1
        callback = callback or function() end

        local button = library:Create("TextButton", {
            Parent = window.contentFrame,
            Size = UDim2.new(1, -20, 0, 30),
            BackgroundColor3 = options.boxColor,
            Text = text,
            TextColor3 = options.textColor,
            TextSize = 16,
            Font = Enum.Font.SourceSansBold,
            LayoutOrder = self.count,
        })

        button.MouseButton1Click:Connect(callback)
    end

    function window:AddLabel(text)
        self.count = self.count + 1

        local label = library:Create("TextLabel", {
            Parent = window.contentFrame,
            Size = UDim2.new(1, -20, 0, 30),
            BackgroundTransparency = 1,
            Text = text,
            TextColor3 = options.textColor,
            TextSize = 16,
            Font = Enum.Font.SourceSans,
            TextXAlignment = Enum.TextXAlignment.Left,
            LayoutOrder = self.count,
        })
    end

    function window:AddTextBox(placeholder, callback)
        self.count = self.count + 1
        callback = callback or function() end

        local textBox = library:Create("TextBox", {
            Parent = window.contentFrame,
            Size = UDim2.new(1, -20, 0, 30),
            BackgroundColor3 = options.boxColor,
            PlaceholderText = placeholder,
            Text = "",
            TextColor3 = options.textColor,
            TextSize = 16,
            Font = Enum.Font.SourceSans,
            LayoutOrder = self.count,
        })

        textBox.FocusLost:Connect(function(enterPressed)
            if enterPressed then
                callback(textBox.Text)
            end
        end)
    end

    function window:AddDropdown(items, default, callback)
        self.count = self.count + 1
        callback = callback or function() end
        default = default or items[1] or ""

        local dropdownFrame = library:Create("Frame", {
            Parent = window.contentFrame,
            Size = UDim2.new(1, -20, 0, 30),
            BackgroundColor3 = options.boxColor,
            LayoutOrder = self.count,
        })

        local selectedItem = library:Create("TextLabel", {
            Parent = dropdownFrame,
            Size = UDim2.new(1, -30, 1, 0),
            BackgroundTransparency = 1,
            Text = default,
            TextColor3 = options.textColor,
            TextSize = 16,
            Font = Enum.Font.SourceSans,
            TextXAlignment = Enum.TextXAlignment.Left,
            PaddingLeft = UDim.new(0, 5),
        })

        local dropButton = library:Create("ImageButton", {
            Parent = dropdownFrame,
            Size = UDim2.new(0, 24, 0, 24),
            Position = UDim2.new(1, -28, 0.5, -12),
            BackgroundTransparency = 1,
            Image = "rbxassetid://6031091004", -- Down arrow icon
        })

        local dropdownList

        local function toggleDropdown()
            if dropdownList then
                dropdownList:Destroy()
                dropdownList = nil
                return
            end

            dropdownList = library:Create("ScrollingFrame", {
                Parent = dropdownFrame,
                Position = UDim2.new(0, 0, 1, 0),
                Size = UDim2.new(1, 0, 0, 100),
                BackgroundColor3 = options.backgroundColor,
                BorderSizePixel = 0,
                CanvasSize = UDim2.new(0, 0, 0, #items * 30),
                ScrollBarThickness = 4,
                ClipsDescendants = true,
                ZIndex = 2,
            })

            local listLayout = library:Create("UIListLayout", {
                Parent = dropdownList,
                SortOrder = Enum.SortOrder.LayoutOrder,
            })

            for index, item in ipairs(items) do
                local itemButton = library:Create("TextButton", {
                    Parent = dropdownList,
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundColor3 = options.boxColor,
                    Text = item,
                    TextColor3 = options.textColor,
                    TextSize = 16,
                    Font = Enum.Font.SourceSans,
                    LayoutOrder = index,
                    ZIndex = 2,
                })

                itemButton.MouseButton1Click:Connect(function()
                    selectedItem.Text = item
                    callback(item)
                    dropdownList:Destroy()
                    dropdownList = nil
                end)
            end
        end

        dropButton.MouseButton1Click:Connect(toggleDropdown)
    end

    return window
end

return library
